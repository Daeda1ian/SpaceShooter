using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Enemy_2 : Enemy {

    [Header("Set in Inspector")]
    //определяют, насколько ярко будет выражен синусоидальный характер движения
    public float sinEccentricity = 0.6f;
    public float lifeTime = 10;

    [Header("Set Dynamically: Enemy_2")]
    //Enemy_2 использует линейную интерполяцию между двумя точками, изменяя результат по синусоиде
    public Vector3 p0;
    public Vector3 p1;
    public float birthTime;

    void Start() {
        //выбрать случайную точку на левой границе экрана
        p0 = Vector3.zero;
        p0.x = -bndCheck.camWidth - bndCheck.radius;
        p0.y = Random.Range(-bndCheck.camHeight, bndCheck.camHeight);

        //выбрать случайную точку на правой границе экрана
        p1 = Vector3.zero;
        p1.x = bndCheck.camWidth + bndCheck.radius;
        p1.y = Random.Range(-bndCheck.camHeight,bndCheck.camHeight);

        //случайно поменять начальную и конечную точку местами
        if (Random.value > 0.5f) {
            p0.x *= -1;            //изменение знака .x каждой точки переносит ее на другой край экрана
            p1.x *= -1;
        }
        birthTime = Time.time;     //записать в birthTime текущее время
    }

    public override void Move() {
        //кривые Безье вычисляются на основе значения u между 0 и 1
        float u = (Time.time - birthTime) / lifeTime;
        if (u > 1) {                        //если u>1, значит, корабль существует дольше, чем lifeTime
            Destroy(this.gameObject);       //этот экземпляр Enemy_2 завершил свой цикл
            return;
        }
        u = (u + sinEccentricity * (Mathf.Sin(u * Mathf.PI * 2))); //скорректировать u добавлением значения кривой, изменяющейся по синусоиде
        pos = (1 - u) * p0 + u * p1;        //интерполировать местоположение между двумя точками
    }
}
